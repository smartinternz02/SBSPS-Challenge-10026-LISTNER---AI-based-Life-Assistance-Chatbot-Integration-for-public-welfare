# -*- coding: utf-8 -*-
"""NLTK

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QtNiZ3q5t8Gz5O89X5akONTxEWxvjTGm
"""

pip install nltk

from nltk.classify import NaiveBayesClassifier
from nltk.corpus import subjectivity
from nltk.sentiment import SentimentAnalyzer
from nltk.sentiment.util import *

import nltk
nltk.download('subjectivity')
n_instances = 1000 #no_of_senetnces to be used
subj_docs = [(sent, 'subj') for sent in subjectivity.sents(categories='subj')[:n_instances]] # 1000 subjective sentences from the subjectivity corpus
obj_docs = [(sent, 'obj') for sent in subjectivity.sents(categories='obj')[:n_instances]] # 1000 subjective sentences from the objectivity corpus
len(subj_docs), len(obj_docs)
#(1000, 1000)

train_subj_docs = subj_docs[:900]
test_subj_docs = subj_docs[900:100]
train_obj_docs = obj_docs[:900]
test_obj_docs = obj_docs[900:1000]
training_docs = train_subj_docs+train_obj_docs
testing_docs = test_subj_docs+test_obj_docs
sentim_analyzer = SentimentAnalyzer()
all_words_neg = sentim_analyzer.all_words([mark_negation(doc) for doc in training_docs])

unigram_feats = sentim_analyzer.unigram_word_feats(all_words_neg, min_freq=4)
#len(unigram_feats)
sentim_analyzer.add_feat_extractor(extract_unigram_feats, unigrams=unigram_feats)

training_set = sentim_analyzer.apply_features(training_docs)
test_set = sentim_analyzer.apply_features(testing_docs)

trainer = NaiveBayesClassifier.train
classifier = sentim_analyzer.train(trainer, training_set)
##Training classifier
for key,value in sorted(sentim_analyzer.evaluate(test_set).items()):
  print('{0}: {1}'.format(key, value))

from nltk.sentiment.vader import SentimentIntensityAnalyzer

sentences = ["PRATEEK is smart, handsome, and funny.","He is terrific person.", "Radha is kind and lovable person.", "You look very funny!.","R u ok!!!","VADER is VERY SMART, really handsome, and INCREDIBLY FUNNY!!!","The book was good.","The book was kind of good.","The plot was good, but the characters are uncompelling and the dialog is not great.","A really bad, horrible book.", "At least it isn't a horrible book.",":) and :D","","Today sux","Today sux!","Today SUX!", "Today kinda sux! But I'll get by, lol"]

import nltk
nltk.download('punkt')

from nltk import tokenize
lines_list = tokenize.sent_tokenize(str(sentences))

import nltk
nltk.download('vader_lexicon')

for sentence in sentences:
  sid = SentimentIntensityAnalyzer()
  print('text: '+sentence)
  ss = sid.polarity_scores(sentence)
  for k in sorted(ss):
    print('{0}: {1}, '.format(k, ss[k]), end='')
  print()

from nltk.sentiment.vader import SentimentIntensityAnalyzer

# Sample sentences for sentiment analysis
sentences = ["PRATEEK is smart, handsome, and funny.","He is terrific person.", "Radha is kind and lovable person.", "You look very funny!.","R u ok!!!","VADER is VERY SMART, really handsome, and INCREDIBLY FUNNY!!!","The book was good.","The book was kind of good.","The plot was good, but the characters are uncompelling and the dialog is not great.","A really bad, horrible book.", "At least it isn't a horrible book.",":) and :D","","Today sux","Today sux!","Today SUX!", "Today kinda sux! But I'll get by, lol"]


# Initialize the list to store sentiment results
sentiment_results = []

# Loop through sentences and perform sentiment analysis
for sentence in sentences:
    sid = SentimentIntensityAnalyzer()
    ss = sid.polarity_scores(sentence)

    # Store the sentiment analysis result in a dictionary
    result = {
        "text": sentence,
        "compound": ss["compound"]
    }

    # Add the result to the sentiment_results list
    sentiment_results.append(result)

# Display the sentiment_results list
print(sentiment_results)

pip install twilio

from twilio.rest import Client

# Twilio credentials
twilio_account_sid = 'TWILIO SID'
twilio_auth_token = 'TWILIO AUTH TOKEN'
twilio_phone_number = '+13187502471'
recipient_phone_number = 'YOUR PHONE NUMBER'

# Create a function to send SMS
def send_sms(message):
    client = Client(twilio_account_sid, twilio_auth_token)
    client.messages.create(
        to=recipient_phone_number,
        from_=twilio_phone_number,
        body=message
    )

# Sentiment scores and corresponding text
sentiment_scores = [0.8316, 0.8439, 0.8545, 0.9227, 0.9342, 0.9469, 0.4404, 0.3832, -0.7042, -0.8211, 0.431, 0.7925, 0.0, -0.3612, -0.4199, -0.5461, 0.5249]
sentiment_texts =  ["PRATEEK is smart, handsome, and funny.","He is terrific person.", "Radha is kind and lovable person.", "You look very funny!.","R u ok!!!","VADER is VERY SMART, really handsome, and INCREDIBLY FUNNY!!!","The book was good.","The book was kind of good.","The plot was good, but the characters are uncompelling and the dialog is not great.","A really bad, horrible book.", "At least it isn't a horrible book.",":) and :D","","Today sux","Today sux!","Today SUX!", "Today kinda sux! But I'll get by, lol"]


# Loop through sentiment scores and texts
for score, text in zip(sentiment_scores, sentiment_texts):
    severity = None
    if score > 0.5:
        severity = "Positive"
    elif score < -0.5:
        severity = "Negative"

    if severity:
        message = f"Sentiment Alert: {severity} sentiment detected.\nText: {text}\nSentiment Score: {score:.4f}"
        send_sms(message)